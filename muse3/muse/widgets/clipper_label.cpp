#include <QPaintEvent>
#include <QPainter>
#include <QStyle>
// REMOVE Tim. Trackinfo. Added.
#include <QLocale>
// REMOVE Tim. Trackinfo. Removed.
//#include <QByteArray>
//#include <stdio.h>
//#include <stdlib.h>

#include "fastlog.h"
#include "clipper_label.h"

namespace MusEGui
{

// REMOVE Tim. Trackinfo. Removed.
// /* Autogenerated from 0.png */
// static const unsigned char b_0_png[355] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,010,0,0,0,012,010,06,0,0,0,0211,0307,037,0200,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,01,03,'I','D','A','T',030,0323,0205,0316,'O','+',0203,01,0,0307,0361,0357,0363,0260,'M','k','.','O',021,';',0320,0254,0331,0301,0301,'i',0355,0340,'H','$','.','^',0,0342,0240,0374,'i',0363,032,'8',0331,'i','E','R',0262,'"','s',0224,033,027,'m',027,0305,0201,0333,0312,0263,0366,0324,'j','5','Z',0353,'y','Z','#',0244,0365,'s','q',0346,0363,012,'>','H','B',0302,0177,0237,'"',';',0354,0243,0322,'e',0340,020,']',')',0221,'o',0315,'H',02,'I',0270,0247,'l',0305,030,'}',0346,0250,0236,'n',0277,0322,0237,0237,0246,0314,0304,'a',025,'G','C','H',04,036,0326,')',0222,'<',0266,'i','h',0300,0313,0261,'l',0301,'I',0230,0261,022,'W',037,'K','&',0320,'S',0253,'`',021,0213,0272,'7',015,'#',0264,0271,032,'L',0270,0273,0223,0327,'I',0354,'w','^',0332,'q',023,0,'!','|',0235,0357,0316,036,0333,027,'k',0305,0216,'7','u',0333,0374,0302,0347,07,0350,06,'>',0303,021,0232,024,'2','}','s','o',0351,' ',0205,0304,0216,0371,0304,0274,'M','<',0304,'`',0257,0215,'$',0274,'3','R',0343,'X','u','2',0325,0203,'V',015,0353,'r',0201,'G',0222,0373,0345,0337,0244,0220,010,0334,'m',0220,0215,0370,'q','L',023,0207,0221,0305,022,0347,0255,'Y','I',030,0222,0370,0213,0311,'?','~',0,'~',0266,'o',0227,'%','@',0340,0266,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 1.png */
// static const unsigned char b_1_png[232] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0210,'I','D','A','T',030,0323,'c',0370,0377,0377,'?',0303,0353,'E',014,'&',0315,0326,014,0227,031,'8',0134,'?','0',0354,0371,037,0362,0377,0377,0177,0206,0377,0377,0377,'3','0','1',0354,'g',0364,012,0214,'c',0235,'Z',0313,'`','p','B',0345,0307,0353,'g',014,'H',0200,0211,0341,020,0303,0216,'#',015,0277,0254,0377,0267,']',0330,',',0300,0360,0367,'/',0262,'$',013,'C',0375,0377,0177,0377,031,030,0376,'1',034,'b',0300,0,'L',014,'x',0,0371,0222,014,0377,0367,'1',0270,0373,013,'3',0134,0345,0343,'b','x',0310,0306,0300,0366,0225,0201,0213,0357,01,0203,0260,0377,'U',0206,'}',0377,0335,031,0377,0377,0377,'O',0236,0261,0,0211,0261,'1',01,0134,'_',06,'P',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 2.png */
// static const unsigned char b_2_png[304] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0320,'I','D','A','T',030,0323,'}',0214,'=','K','B',01,0,'E','O',017,037,0250,'<',0264,'!','r',020,0234,0362,03,'%','C',032,0372,01,0356,'.','n','.','o',022,02,'q',026,0327,0206,0360,027,'8',0266,0266,04,0341,'`',0204,0340,0240,025,0270,'(',0316,0201,015,'"',017,'_',0345,0342,0307,0240,0313,'m','x',024,'-','z',0340,'N',0207,'s','Q',0217,0134,'5','I','7','`','0','>',0366,'3',0345,'$','?',0245,0361,'Q','A','2','P',0213,010,0321,0333,04,0222,')',0207,'`',0277,0314,013,'W','w',0357,0254,'t',0352,0243,' ','W',05,0134,'<',0302,0316,0214,0,0261,0350,'7',026,033,'$','y',0373,0304,0352,0330,0264,0210,0327,0207,0364,0266,0347,0222,0360,0304,0202,0320,'S',0211,'G',022,0265,01,0317,0273,0213,0337,0,011,0377,0333,'5',0367,'d','n','^',031,'(',0376,0367,'$',0301,0372,01,';',0305,0345,0210,0366,0266,0370,'_','H',0202,'y',0223,0306,0231,0301,022,0237,0371,05,'8',0200,'C',0272,'>','a',0250,0354,0221,'$',0366,'a','p',0200,037,0260,0257,'l',0134,'v','+',0357,0303,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 3.png */
// static const unsigned char b_3_png[320] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0340,'I','D','A','T',030,0323,'}',0214,0253,'K','C',01,030,'G',0317,'w','q','w','b',020,021,037,'a',0355,0342,0300,'4',0224,0231,'|',0245,0273,'$',0226,0225,0205,'U',0301,0266,0277,'`','e','E',014,0263,'(',0206,0231,']',020,'L','&',0203,0342,020,031,'L',0274,'A',0367,0200,031,0356,'D',06,016,'4',014,'Q',021,024,'~',06,'A','0',0350,0201,0223,016,034,'>',0216,0361,'3','1',0352,'`',0255,0250,'C','H','|',0255,0301,0301,0213,'/',011,0264,0317,'0',0311,0243,'1','$','S',033,0257,0230,0340,0226,0134,'p',0202,024,'q',0310,0352,'Y','W',0253,'O',0302,0350,'U',0231,0256,0264,0350,023,033,'m',02,0237,'H',0342,'n',0203,035,'o',0210,0256,'K',0364,015,0177,0367,0232,0263,0367,0251,0357,0255,0364,'c','w',0217,0231,0315,05,032,0244,0312,'7',0364,'4',0361,'+','J',0342,'a',0233,'-',',',035,'p',0251,'y',0347,0276,'`',0236,'e',0317,0343,06,'F',0315,'&','+',0247,',',0262,0264,0342,'2','N',0310,'c',0211,0365,0345,021,':',0270,0203,0241,'1',0320,'f','.',0177,0301,0341,0353,0254,'$','L',022,0177,0341,0360,017,'_',0361,0345,'g',0275,0313,0300,0355,'i',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 4.png */
// static const unsigned char b_4_png[275] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,010,0,0,0,012,010,06,0,0,0,0211,0307,037,0200,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0263,'I','D','A','T',030,0323,'c',0370,0377,0377,'?',03,034,0277,'`',0340,0336,0237,0302,0260,0237,'A','2',0353,011,0303,0231,0377,0346,0377,0377,0377,'g','`','b',0200,03,'F',0306,047,0313,030,'j','R',0346,'3','h','2',0260,'3',0263,0300,'D',0341,012,0376,0354,'e','p',0310,'(','b','u',0274,0353,'(',0260,0234,0343,0301,0323,';',0250,012,0236,'2',012,0257,'j','g','h',0335,032,0267,0343,0343,0265,0210,017,'/',030,021,0306,'2','0','1','0','0','2',0337,0234,0315,0320,022,'}','%',0237,0221,'!',0335,0251,'X',0202,0231,01,025,0374,0377,0317,' ',0264,0314,0231,0341,'*',03,';',0317,023,06,'F',0246,0353,'B','<',014,0317,030,031,'x','>','1',0260,0211,0335,'b','(',0273,'<',0207,01,0305,027,0377,0377,'3',0274,0233,0317,'P',0316,0311,020,'t',04,0213,'/',0260,03,0306,0377,0377,0377,0343,'U','@',0320,04,0,'G','X','L',0354,'R',0371,0345,0322,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 5.png */
// static const unsigned char b_5_png[294] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0306,'I','D','A','T',030,0323,'}',0217,'-','k',0202,'a',0,'E',0317,0363,0276,0223,025,'A',0301,0340,0266,0340,0212,016,014,'6','W',04,027,0234,'E',024,0203,'(',0210,0315,'?',0260,0350,017,0260,013,'+',013,'K',0203,0205,0241,'E','P',0214,06,'e',0311,'l',023,'u',06,'A','6','A',0374,010,'j',0272,'k','"',0202,'^',0270,0365,0334,'s','Q',0227,'t',0306,0303,026,0373,'j',03,',',0301,',',0211,'}',015,0221,'<',0250,'K',':','L',0250,'O','[','Y','I',034,0327,0342,'R',0364,'M','*',0347,'e',0217,'}',0275,0303,0351,0233,023,')',0267,0250,'o',0202,0222,'8',' ','F',0357,0270,032,'/',0344,0213,01,0246,'<',0177,014,0230,0350,0226,0323,0235,0331,'+','o','X',0231,'>','=','E',0255,'Y',0305,0334,0233,'x',0355,0301,0200,0275,'n',032,0177,0275,0305,023,0221,0204,0203,';',0306,',','>',')','$','o',0370,0261,015,0277,'X',0356,'?',0302,0245,016,0325,0325,0243,'$',0214,0244,0263,0262,027,0257,0374,03,0214,0307,0134,'D',0327,0364,'7',' ',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 6.png */
// static const unsigned char b_6_png[328] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0350,'I','D','A','T',030,0323,'}',0303,0261,'K',02,'a',0,0306,0341,0337,0367,0311,0351,0242,0306,021,05,'R',0323,0201,'x',016,0372,037,0244,'P',0213,'c',0356,'A',0270,0232,0344,'T','K','[','D',0264,05,'A','K','[','m',0321,'P',024,024,'d','C',0265,'U','4',0344,05,'W',0204,034,0344,'r',020,024,0346,020,'M','o','k','K','=',0360,' ',0211,0217,'=',0252,'M',0237,';',0260,'!','8',0217,0324,'O','N',0221,0322,'(',0240,0270,0342,021,0320,'8','?',0346,'M',031,011,0247,0300,'r',06,0311,022,'o',0261,'I',0266,'y','K','W','%','I',0374,'n',0343,010,0237,0302,0270,0263,0264,'`','6',0262,0216,011,'M',0272,030,0232,0366,0315,0272,0201,'$',0367,'m','.','R',0214,016,'h',0234,035,0321,0353,0215,0364,0267,'i',0345,')','?','p',0370,'5','g',0307,'&',0350,0213,0322,0220,0371,0332,0256,'<','o','0','Y',0341,'z','*',0325,0375,'$',036,0372,'6','W','f',0177,0232,0313,'w',':','A',0315,0260,0343,0274,'v',0230,'=',0370,0236,'I',0222,'w',0257,0220,'H','<',0255,0262,'X','q',0211,'H',0330,010,0267,0372,0302,0332,'s',013,0311,032,'I',0374,0305,0362,0217,037,0366,'+','_',0201,0251,'$','7',0245,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 7.png */
// static const unsigned char b_7_png[268] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0254,'I','D','A','T',030,0323,'}',0215,0261,012,01,01,034,0207,0277,0273,0333,'.','R','.',0223,'d','4',0311,'`',0264,0270,014,0227,'G',0260,'Z',0314,0312,'B',0231,0354,'^','@',0304,0344,025,0216,01,0271,0345,0312,0312,0344,01,0224,':','J',031,0334,']',0375,015,0310,0335,0300,'W',0337,0364,0365,0353,0307,'u','J',0273,0222,0304,0207,0227,0212,'B',0200,'^',016,031,'y','}','D','$',0346,'m','N','3','K','u',0315,'2',0250,0305,0202,0357,'P','j',031,0254,030,034,0207,0210,0250,0337,'x','"','3','3','q','h',0330,'6','g','I',0210,010,0357,0210,'v',0350,'1','&',0337,'u',0331,'I',0341,'3','@','D',010,'6',0230,026,')',0227,0211,0327,0211,0336,0250,0,0227,'=',0365,0205,'f',')',024,0323,'[','"',0250,0,0341,03,03,'#',0247,0243,'s',0217,'F','E','D',0370,0205,0312,037,0236,0225,'(','f','f','y',0241,'!',026,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 8.png */
// static const unsigned char b_8_png[337] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0361,'I','D','A','T',030,0323,'}',0301,'M','+',04,01,0,0307,0341,0337,0314,'d','f','l',0231,0335,'Z','V','r',' ',0305,0315,0211,'r',0341,0242,'V','!',027,0224,'R',0353,0346,0340,'#','H',0341,0260,0311,0313,'U',0241,0134,0366,0264,'%',0216,'h','(',027,'.',0326,0206,0203,0254,0227,0331,'v','(','y','Y','{',0226,0227,0372,0373,04,'<',017,022,0346,0375,02,'S',0335,'Q',012,0256,'M','H',0375,'`',0211,0365,0347,011,'I',0260,']',0244,'u',0272,0201,'3',0322,0301,0306,'M',0231,0232,0303,024,0307,0364,0355,0134,0242,'|',0324,034,'}','Z','K','4','5',0362,0315,'k','%','v',0372,0211,0375,0362,0310,027,'m',0315,0205,'-',':',01,0377,'g',0354,'c',0217,0336,'T',035,'E','"',0366,'9',03,'Y',0237,'[',0325,'J','8',0260,0177,'4',0234,'I',0342,0223,0334,'<',0310,'.','2',0331,'N','<',0307,0374,'u',032,0311,'b','e',0211,'9',0227,0241,034,047,0352,0221,'0',0302,'e','V','q',0306,'/',0310,0253,0313,034,0361,0260,'#',0274,0305,0270,'+',0267,04,'`','W',0336,0211,0343,':',0325,0,'(',' ',0221,0351,'g',0327,0303,'x',0260,0252,'(',0341,'u',0204,0314,0134,0315,'"','Y',0206,'$',0376,'b',0362,0217,'_','g',0256,'Z','z','z','b',0240,'(',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 9.png */
// static const unsigned char b_9_png[327] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0347,'I','D','A','T',030,0323,'}',0303,0315,'G',0203,01,0,0307,0361,0357,0363,'x','z','9','l','T','+','Q',0333,'$',0351,0205,0250,016,'5',0232,0250,0375,05,0263,0303,0354,017,0250,0333,'N',')','u',0357,'>',0365,037,'D','&',0242,0303,0250,'4','c','3',0233,'E',0317,0303,'x','x',0364,0254,0321,'$','u','J',':',0365,'F','~',0235,';',0324,0207,017,'j','1',0230,'O','r',0332,'g','p','g','b','t','X',0332,0263,')','~',0316,'J',02,'o',0227,'#',0242,'[',016,0345,0257,0271,0217,06,023,0373,'1','|',0322,0227,0327,'H',01,'N','V','q',0330,'t',0317,0221,',',011,0313,0335,0246,0310,0320,0306,023,0266,0342,'V','t',0212,'g',0252,0245,'Q',0256,'&',0307,'^',037,030,'9',0274,'`',0232,0367,0373,0,'/',0337,'a','T','c','<',0267,'B',0251,07,0323,0247,0177,0321,'%',021,0332,0231,'a',0301,0243,0254,024,0222,'~','}',0314,'q','@','p',0335,0241,0251,'y','T',0241,0227,'x','!','(',0211,0267,'3',0226,0263,021,'<',0262,'v',01,0251,033,0325,'Y',0313,014,0323,0306,0352,0272,0305,030,0360,'I',035,0347,0271,'Q','H',022,0206,'$',0376,'b',0362,0217,037,0300,'J','f',0310,0277,'7',0,'S',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from comma.png */
// static const unsigned char b_comma_png[194] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,06,0,0,0,012,010,06,0,0,0,0227,016,'/','3',0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,'b','I','D','A','T',010,0327,'c',0374,0377,0377,'?',03,'6',0300,0304,0200,03,0320,'Q',0202,0221,0365,'x',06,'c',027,0243,'l',0326,'R',0306,0375,0277,0264,0221,'u',0260,'}',0375,0302,'`',0305,0365,'d','c',' ',0303,0371,'7',05,014,014,014,014,014,0377,0377,0377,0207,0340,0313,014,0232,')',0254,014,0273,030,0346,0274,0251,0374,0377,0377,'?','T',0342,'#',0203,0320,'B','G',0206,0215,014,0256,013,0327,'1','<',0373,'/',0362,0377,0377,0177,06,0,0312,'B',')','U',030,0201,'q','q',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from minus.png */
// static const unsigned char b_minus_png[144] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,06,0,0,0,012,010,06,0,0,0,0227,016,'/','3',0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,'0','I','D','A','T',010,0327,'c',0374,0377,0377,'?',03,'6',0300,0304,0200,03,0220,'.',0301,0360,0377,06,0203,'b',0227,021,0303,')',06,06,0206,0253,020,',','x',0225,0241,0352,0352,'L','F',':','X',0216,'S',02,0,0245,0315,016,01,0334,0362,'.',0205,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from inf.png */
// static const unsigned char b_inf_png[426] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,021,0,0,0,012,010,06,0,0,0,'R','|',0265,0242,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,01,'J','I','D','A','T','(',0317,0275,0222,0317,'+',0303,'q',034,0306,'_',0237,'o',0312,'d',0263,0255,0210,03,'e',0211,0362,'k','Y','I','b',0346,'O',0330,'E',0222,033,027,'q','!',0265,024,07,'s',0301,'v','b','Q','s',0341,0342,'*',0224,0222,037,07,027,0222,032,0371,'1','f',0222,'D','2',0232,'M',0223,'q','z',';','h',027,'e',';','(','O','=',0227,0247,0347,'y',016,'O',0217,022,021,0376,012,'-',0263,'E','e','9','U',0201,'A',0255,0223,0235,'R','.',0207,0224,'A',0331,0246,'L','*',0225,027,0221,0337,0371,0204,'~',0273,0213,'M','3',0332,047,'u','C',0367,',',0275,'4','_','O',0340,0256,0327,023,'G',0313,0215,0322,0266,0272,'C','L','L','i','K','>',0327,0350,'h',0304,'x','E','w',0377,0364,0240,0225,'[','*',0235,0267,'u',032,0207,0214,'^',0370,0243,0313,0264,0333,0250,012,0260,0222,0354,'D',0216,0261,'x','m',034,0,0301,'o',0232,0203,014,0237,0315,0211,010,0221,031,0274,0350,'{',0366,'8',0226,0232,0344,06,0216,0201,012,022,0324,0216,0275,'r','"',0265,022,0244,0272,0317,0300,'.',0263,021,'O',026,'V',0271,'q',035,0322,0340,0372,0271,04,'h',0361,0134,0236,015,'o',017,'*',0361,0216,'1',0371,'H',0345,'v',0230,';',023,0356,0274,0370,0270,0325,0267,0345,0304,'w',0224,'(',0326,'c',0322,0335,0245,0337,0344,0234,0362,'I',033,'a',0212,',',0241,'B','t',0327,0270,02,0213,0247,036,'F',0354,'F',0222,'(',0365,0201,'}',0366,0236,0220,'X',0322,0227,0210,020,0235,0247,0244,'%',0237,'V',034,'~',07,'7',0242,023,'A',0355,0367,'b',0315,0241,0254,0211,0205,'X',0251,0210,0240,0376,0351,047,0231,0361,05,'&','a',0316,0203,'O',0224,0256,0340,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// 
// /*-------------------------------------------------*/
// 
// /* Autogenerated from 0.png */
// static const unsigned char w_0_png[317] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,010,0,0,0,012,010,06,0,0,0,0211,0307,037,0200,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0335,'I','D','A','T',030,0323,0205,0317,'A','+',0203,'q',0,0200,0361,'g',0377,0326,0344,0240,035,'p','Q',';','M','o','J',0212,0317,0340,'D','r','r','X','j','s',0360,05,'(',0271,'8',0311,'A',0255,0335,0234,0134,'v',0363,05,0220,0253,'+',0315,0221,']',0274,0305,026,0326,0212,0327,0326,022,0261,0365,0270,0355,0310,0357,0372,0234,036,04,0304,0264,'e',0367,'M','l',0252,015,0275,0277,0325,0342,0262,0,02,0256,0273,'i',0317,0216,0356,0224,0215,0234,0360,0302,07,0275,'j',0353,'L',0204,0230,0361,0310,'K',0255,'%',0232,0237,'v',0315,0202,0376,0234,0373,0341,0253,'n',0354,06,'`',0224,034,'9','h','u',0210,0343,'.','{',024,0241,'[',0345,0205,021,0230,0234,015,014,015,0372,0234,0261,0305,'|',0245,0315,0322,'x','B',0206,0,020,0200,'O',0232,'<',0301,0134,0226,0355,0326,02,'T',017,031,'#','b',0212,'>',0274,0335,05,'H','}','s',0315,011,0357,0371,',',034,0367,'X',0255,'?',0263,'H',0201,'t',0355,013,'n','N',031,'n','V','<',0260,'c',0303,0201,0217,032,0327,0265,0264,'"',0220,0222,0277,0205,0177,':',0277,0340,0363,'{',0362,0316,'H','h',0326,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 1.png */
// static const unsigned char w_1_png[215] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,'w','I','D','A','T',030,0323,0235,0316,'=',012,0302,'@',0,05,0341,0331,'%','E','n','"',0236,0303,024,0202,' ','X',0350,0236,0301,'[','y',0204,'@','J',0233,0134,'"',0275,0240,0255,0330,0370,023,'$','d',0322,'F',02,0202,'~',0355,0300,0343,'!','`','r',0356,0321,'Z',0237,'/','M','{',01,0201,0310,0322,015,07,'*',0212,0376,02,'y',0313,'H',0244,0245,'"',0337,0315,'(','b','I',027,034,0307,0214,':','t',04,'`',0301,'D',0344,0213,0377,'#',0256,0134,'{',0265,0361,0341,0311,0336,0267,0336,0317,'z','k','t',0233,'>',0357,0375,'2',';',0,020,0266,'6','C',0345,0373,0216,0253,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 2.png */
// static const unsigned char w_2_png[276] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0264,'I','D','A','T',030,0323,'}',0314,0261,'*','E',01,0,06,0340,0377,0270,022,06,0312,0242,0356,03,0350,'.','w',0240,014,06,0254,026,026,0233,0274,0200,0362,012,'F','u',027,0343,'y',0,'%',0231,0275,01,0233,0230,0356,0302,'`',0341,0324,0271,0303,'Q','&',0311,035,'|',0206,0353,0306,0302,'_',0377,0364,0365,0377,0261,'a',0331,0203,'k',0237,0372,0336,'<',0321,'T',034,037,0221,'V',0354,'h','s',0326,'%','-','1',0255,'t',0305,0355,'+',0235,0245,0311,0134,026,'u',0212,0324,'I',0222,0371,0314,'e','1',013,'I','5','H',06,'M','$',0337,'5',0243,'t','A',0377,0231,0255,'U',031,'C',0333,0254,0322,'9','w',0367,'l',0257,0214,07,021,'S','N',0234,'r',0363,0310,'Z',0347,0347,')',0211,']',0373,0336,0275,0260,'w',0370,033,'F','x',0240,0347,0303,0220,'a',0203,'z',0324,0252,'b','}',0263,0220,0277,'3',0361,0217,0345,013,'Y',0311,0201,0227,0256,0336,0306,' ',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 3.png */
// static const unsigned char w_3_png[285] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0275,'I','D','A','T',030,0323,'}',0314,0261,'J','B',01,0,'F',0341,'s','/','n',0202,030,0265,'(','h',016,'w','q',011,032,0204,';',':',04,'6',0265,0206,0270,047,'N',0355,'M','=','C',0357,0240,017,' ',0202,'[','K','8',0271,030,'V',016,011,'7',027,'q',0221,0340,'.','e',011,0247,0301,0305,'%','?','8',0323,017,'?','6',0274,'p',0351,'T','}','q',0343,'B',0337,0247,0332,0274,024,0300,0226,'9',0355,034,011,'X',0264,0344,0223,'+',0355,'M',0224,'l',0206,'n',0220,0322,'e',047,'&',0242,'@',06,0222,'g','`',0203,0200,'w','>',0370,'e',0342,0267,0277,0372,0226,'j','=',0336,0335,0356,'w','e',0344,0320,'W','}',0374,0320,0352,'i',0310,0276,'~','0','g',0300,020,0316,'O',0340,0370,',',0344,0336,010,'o',0313,0,'T',0314,'S','#',0206,'Y',012,0237,'3','l','{',0343,0332,'D',0177,0346,'n','M','t','<',0322,0353,0232,'@',' ',0377,013,017,'l',0374,01,0251,014,'o',0353,'2',0357,0237,'/',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 4.png */
// static const unsigned char w_4_png[242] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,010,0,0,0,012,010,06,0,0,0,0211,0307,037,0200,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0222,'I','D','A','T',030,0323,0205,0217,0261,012,'A',01,0,'E',0317,0323,'[','d','V',0212,'|',0206,0301,'`',0263,0372,03,'~',0200,0370,0215,'g','1','(',0261,0262,033,'l','~',0300,'G',0210,'E','"',',',022,0245,0274,0341,0330,0360,0244,0234,0272,0333,0351,0324,'E',0340,'=',0323,016,0235,0353,0346,0246,0345,0212,'@',0212,027,06,'4','i','S',0247,0304,07,'o',0241,'J',0205,'.',015,0266,0314,' ',0214,0223,'B',0316,',','-',06,'d','F',047,0306,034,0277,012,0206,'t',0350,'Q',0333,027,'a',032,'q','%',0211,'y',013,'.',0134,'i','|',0322,'x',0351,0305,0203,0306,017,0275,0257,0265,'?','!',0371,02,'l',032,0351,0356,0374,0343,0305,'o',02,0377,010,0177,013,'O',0367,'r','L','V','{',02,0274,'+',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 5.png */
// static const unsigned char w_5_png[258] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0242,'I','D','A','T',030,0323,'}',0215,';',012,0302,'P',0,04,'7',0257,0364,010,0266,'"','(',0330,'Z',0371,'m',0354,'4',0220,'J',0304,0302,023,04,0257,'"',0344,'(',036,'A','P',0204,0264,0202,0215,'U','@',023,05,'I',0341,'?',0201,0261,'H',023,02,':','0',0325,0302,0216,0350,'b','s','&',0201,0344,016,0304,0231,'~',0,0365,0252,0350,'b',0363,0340,012,'S',027,'I','y',0215,'$',0311,022,'R',0372,'Q',021,0332,014,011,'y','C',0372,0202,'[',04,0233,'%','8',015,0224,0277,031,'Q','b',0301,0200,'-',01,0254,0217,'Y',0263,0320,'a',0216,07,0361,023,'z',0216,0221,'K','E','x','5','!',0243,026,'e',0365,0325,0221,0366,0261,024,0355,0304,0214,011,'!',07,0340,04,0351,05,0374,025,0214,0233,'H',0262,0320,'o',0314,0237,'M','_','x',0275,'{',0253,0235,0274,0203,0263,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 6.png */
// static const unsigned char w_6_png[299] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0313,'I','D','A','T',030,0323,'}',0311,'/','K',03,01,0,'@',0361,'w','7',0221,0201,'S',0203,'.',0233,014,'2','7',020,021,'L','*','~',05,0273,0250,0230,0264,012,'&',0243,'m',0260,0266,0260,'b',0262,032,017,026,'.',030,04,'Q',0207,'q','0',0335,0306,0374,023,'d',0305,'Y','v',0352,0306,0263,'Z',0266,07,0277,0364,020,'p',0307,025,0357,0274,0321,0237,0246,0277,'6','4','~',0320,0351,'y',0134,'r',0321,'[','_',0265,022,'i','6','#','`',0344,0214,0222,0302,'c',0213,0372,0366,0251,033,0333,02,0377,0205,',','P',0200,'/','y',0272,'>',0344,0333,':',0366,0352,'X','>','G',0322,'X','2',0326,0301,'P','/','b',']',0235,'u',0317,03,0373,'v','u',0377,'$',0344,0235,'6','$',03,0250,'^',021,0324,'z',0324,0270,0347,0231,011,0230,0313,0207,'<','r','I','g','*',0201,0265,'M',0314,'M',0262,0316,026,0313,0375,04,'Z',021,'b',0340,0251,0273,0276,0330,0320,'a','G','?',0332,'z','v',0244,0244,02,031,']','8',0346,0361,07,'+',';','~',0332,047,'r',0270,'E',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 7.png */
// static const unsigned char w_7_png[251] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0233,'I','D','A','T',030,0323,'}',0313,0241,016,0202,'`',0,'E',0341,0373,0203,0301,0344,0234,0263,0272,'Y','l',06,0213,025,037,0300,0350,0264,0332,0354,':',0253,0311,047,' ','X',0234,017,'`','2',0373,06,0314,'`',047,0220,',','4',0202,033,06,'e',034,03,0202,022,0360,'n','7','}',';','b',0316,0222,';','O',0370,'<',0345,05,'I',02,0253,0275,0220,0312,0237,0262,0200,'8',0204,0311,0254,014,03,'z',0134,010,'`','{',0,0331,'_',0350,0322,0344,0210,07,0247,'+','4','Z',0250,0250,0260,0331,0260,03,'?',0204,0321,'0',017,'2','t','p',0270,021,0301,0332,05,0231,034,'-','I','R','_','c','u',0242,0232,0344,0235,'e',0262,'H',05,0326,0325,0226,'b','#',0245,017,0375,0314,0240,0352,'Y',0177,'L','o','g',06,'g',0251,0236,'N','>','v',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 8.png */
// static const unsigned char w_8_png[301] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,07,0,0,0,012,010,06,0,0,0,'x',0314,'D',015,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0315,'I','D','A','T',030,0323,'}',0316,0261,'J','B','a',0,'@',0341,'s',0177,0305,'@',0207,0356,020,0202,'P',024,0330,0342,'#',0270,025,'A','C',020,0364,02,0321,'"','=','@','>',0200,'P',0340,0342,0346,022,0270,0265,0270,'4','E','/',0320,'P',020,'5',047,030,015,'&',024,0324,0225,0270,'&','4',0251,0247,0245,0325,0316,0372,'-',07,'1',0262,0356,0221,'o','>',';','u',0240,0357,0257,'Z',0257,')',021,0226,0335,0364,0321,'D',0317,'.',0335,'7','o',0307,';',0275,0371,0320,0225,'R','`',0302,0204,021,')',0224,0212,0234,0220,'#',0246,0,'/','O','0','J',021,'p',0307,0252,'}',023,0235,0365,0364,0266,0257,0225,'u',01,',','[',0364,0332,'{',0275,'z',0360,0334,'C',0307,016,0265,0331,'R',0262,'x','l','C',0307,0251,0356,036,0374,0315,0265,0365,0363,'[',0267,0367,02,0201,014,',',05,'X','[','e',0213,014,'1',0313,'0',017,020,0211,033,0306,'v',0275,0360,0307,0304,0271,03,0375,032,'j',0353,'T',0311,'F',0262,0270,0360,0217,0361,013,0321,0254,0207,026,0216,']',0272,017,0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from 9.png */
// static const unsigned char w_9_png[307] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,010,0,0,0,012,010,06,0,0,0,0211,0307,037,0200,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,0323,'I','D','A','T',030,0323,0205,0212,0261,'J','B',01,0,'E','O',032,'T',030,0264,'8',0205,'!',010,'Q',0220,0221,021,0224,0245,04,'o','h',0363,013,0374,0207,0232,0374,01,0367,0346,0334,'"','j','k',010,'Z',0245,0251,0251,'Z',0204,024,'*','#',0207,'^',0360,'h','2',047,'!',0322,0343,0360,0266,0206,':','p',0227,'s',017,02,0346,0134,0360,0302,'S',0277,'}',0367,0307,017,'}',0270,0327,0312,0206,0,'b',0322,0272,'g',0372,0370,0251,0373,0233,0346,']',0262,'i','O',0257,0237,'u','1',0235,0,0346,')','P',0206,'V',010,0267,'/','t',0210,'h',0321,0205,0355,034,0254,0354,'M',03,'C','B','z',0260,0272,016,0305,',',07,0314,020,'P',0200,'T',022,'2',0313,010,0270,'c',0306,033,0257,034,0331,0325,'~',0333,0201,047,0216,0355,'k',0365,'(',016,'~',0357,0320,'c',0215,0276,0264,024,0304,'b',0327,'9',0255,0245,04,014,0134,0363,0316,'P',033,'M','e','6',016,'J',06,'F',0276,0352,0370,'I','G','o','z','y',0256,'[','i',0201,')',0371,0233,0304,'?','?',023,02,04,0207,0270,0306,'[','w','5',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from comma.png */
// static const unsigned char w_comma_png[190] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,06,0,0,0,012,010,06,0,0,0,0227,016,'/','3',0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,'^','I','D','A','T',010,0327,0305,0313,0261,015,'@','@',0,'F',0341,'w',0227,0134,'+',0241,'Q','k',0265,0227,0230,0300,0,0326,0260,0205,0216,0316,'4','B','r','s',0134,'k',03,'J',035,0277,'F',0241,0320,'{',0355,0227,'g',0304,'w',0226,0377,'A',0216,'Q',03,0212,013,'j',0374,0373,'p',0244,'T',0234,'e',015,0276,'C',0330,07,0314,'A','O','K','d',0203,'}',0305,'p','!','@',0211,'2','M',012,0322,034,0244,'"',027,'p',03,0271,'^',037,'H',0235,0244,'a','[',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from inf.png */
// static const unsigned char w_inf_png[370] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,021,0,0,0,012,010,06,0,0,0,'R','|',0265,0242,0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,01,022,'I','D','A','T','(',0317,0275,0222,'=','(',04,0,0,0205,0277,0363,0337,025,035,'9',0233,'"','!',0331,'O',031,0354,0224,'$',0373,'I',0351,0312,0300,'`',0261,'I','v',0243,'I',031,0205,'R',06,022,013,'e','S','d',0271,0272,0313,0340,'"',0347,'.',0371,013,'G','~',0356,'3','(',06,'u','7','(',0257,0336,0362,'z',0275,'z',0257,027,0220,0277,0243,0244,0270,0305,0,0273,0206,'0',026,0374,0226,'b',06,'1','^',0207,0224,'}','Y',012,0322,'*',0347,']',0365,0305,'w','M',0335,0353,'x',0324,'1',0207,'M','{','g',0336,'G',0335,'O','j',0244,0255,'p','H',0237,'C','f','}',0321,0365,'-',0367,'L',0352,'m',0316,033,0257,'u',0371,0310,')','{',0275,0360,'I','g',0226,'J','h',0267,0231,'C',017,0320,0370,017,027,'V',0,'h','"','B',0303,0333,07,0254,'m','3',0315,010,0211,'P',0236,0332,0207,020,'l','-',0261,'I',0212,',','o',0320,0332,'Q',06,0234,02,0221,0337,'S','P','I',0224,014,037,0345,'y','J',0203,0265,0204,'i','%','L',05,'T',013,0243,023,0314,0221,0240,0216,012,0270,0274,'*',0134,0247,0305,'F','w','<',0321,'t',0306,0254,'W',0272,'q',0354,0242,'1',0323,0346,'4',0377,0252,'g','O',':','8','P','d','X',0260,0337,'z','s','v',0353,'y',0227,'v',0325,010,'8','i',0233,0317,0366,0350,'l',0247,022,010,0374,0323,'O',0212,0343,023,'%',0211,0311,037,0226,0342,'o','3',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// /* Autogenerated from minus.png */
// static const unsigned char w_minus_png[136] = {0211,'P','N','G',015,012,032,012,0,0,0,015,'I','H','D','R',0,0,0,06,0,0,0,012,010,06,0,0,0,0227,016,'/','3',0,0,0,06,'b','K','G','D',0,0377,0,0377,0,0377,0240,0275,0247,0223,0,0,0,011,'p','H','Y','s',0,0,016,0304,0,0,016,0304,01,0225,'+',016,033,0,0,0,'(','I','D','A','T',010,0327,'c',0374,0317,0200,035,'0','1','P','M',0202,0205,'A',0375,0277,'"',0303,'2',0206,0225,014,'F',014,0334,010,0341,'9','W',030,0351,'`','9','N',011,0,0315,020,06,'V',01,0375,'k','6',0,0,0,0,'I','E','N','D',0256,'B','`',0202,};
// 
// static const  QByteArray numbersPng[2][13] =
// {
//    {QByteArray(reinterpret_cast<const char *>(b_0_png), sizeof(b_0_png)),
//     QByteArray(reinterpret_cast<const char *>(b_1_png), sizeof(b_1_png)),
//     QByteArray(reinterpret_cast<const char *>(b_2_png), sizeof(b_2_png)),
//     QByteArray(reinterpret_cast<const char *>(b_3_png), sizeof(b_3_png)),
//     QByteArray(reinterpret_cast<const char *>(b_4_png), sizeof(b_4_png)),
//     QByteArray(reinterpret_cast<const char *>(b_5_png), sizeof(b_5_png)),
//     QByteArray(reinterpret_cast<const char *>(b_6_png), sizeof(b_6_png)),
//     QByteArray(reinterpret_cast<const char *>(b_7_png), sizeof(b_7_png)),
//     QByteArray(reinterpret_cast<const char *>(b_8_png), sizeof(b_8_png)),
//     QByteArray(reinterpret_cast<const char *>(b_9_png), sizeof(b_9_png)),
//     QByteArray(reinterpret_cast<const char *>(b_comma_png), sizeof(b_comma_png)),
//     QByteArray(reinterpret_cast<const char *>(b_minus_png), sizeof(b_minus_png)),
//     QByteArray(reinterpret_cast<const char *>(b_inf_png), sizeof(b_inf_png))},
// 
//    {QByteArray(reinterpret_cast<const char *>(w_0_png), sizeof(w_0_png)),
//     QByteArray(reinterpret_cast<const char *>(w_1_png), sizeof(w_1_png)),
//     QByteArray(reinterpret_cast<const char *>(w_2_png), sizeof(w_2_png)),
//     QByteArray(reinterpret_cast<const char *>(w_3_png), sizeof(w_3_png)),
//     QByteArray(reinterpret_cast<const char *>(w_4_png), sizeof(w_4_png)),
//     QByteArray(reinterpret_cast<const char *>(w_5_png), sizeof(w_5_png)),
//     QByteArray(reinterpret_cast<const char *>(w_6_png), sizeof(w_6_png)),
//     QByteArray(reinterpret_cast<const char *>(w_7_png), sizeof(w_7_png)),
//     QByteArray(reinterpret_cast<const char *>(w_8_png), sizeof(w_8_png)),
//     QByteArray(reinterpret_cast<const char *>(w_9_png), sizeof(w_9_png)),
//     QByteArray(reinterpret_cast<const char *>(w_comma_png), sizeof(w_comma_png)),
//     QByteArray(reinterpret_cast<const char *>(w_minus_png), sizeof(w_minus_png)),
//     QByteArray(reinterpret_cast<const char *>(w_inf_png), sizeof(w_inf_png))},
// };
// 
// QImage ClipperLabel::_numbersImg [2][13];
// bool ClipperLabel::_imagesLoaded = false;


// REMOVE Tim. Trackinfo. Changed.
// ClipperLabel::ClipperLabel(QWidget *parent):
//    QFrame(parent),
//    _isClipped(false),
//    _value(0.0)
// {   
//    setStyleSheet("[clipped = \"true\"]{color: white; border-width: 1px; border-color: blue; background-color: red; border-style: outset; border-radius: 5;}"
//                             "[clipped = \"false\"]{color: black; border-width: 1px; border-color: blue; background-color: white; border-style: outset; border-radius: 5;}");
//    setContentsMargins(0, 1, 0, 1);
//    setProperty("clipped", "false");
// 
//    if(!_imagesLoaded)
//    {
//       _imagesLoaded = true;
//       for(int i = 0; i < 2; i++)
//       {
//          for(int k = 0; k < 13; k++)
//          {
//             if(!_numbersImg [i][k].loadFromData(numbersPng [i][k], "png"))
//             {
//                fputs("Error loading ClipperLabel number images (png support is broken?)!", stderr);
//                abort();
//             }
//             if(_numbersImg [i][k].format() != QImage::Format_ARGB32)
//             {
//                fputs("ClipperLabel image format is wrong (must be QImage::Format_ARGB32)!", stderr);
//                abort();
//             }
//          }
//       }
//    }
//    setVal(_value, true);
// }

ClipperLabel::ClipperLabel(QWidget *parent):
   QFrame(parent),
   _isClipped(false),
   _value(0.0)
{   
//    setStyleSheet("[clipped = \"true\"]{color: white; border-width: 1px; border-color: blue; background-color: red; border-style: outset; border-radius: 5;}"
//                             "[clipped = \"false\"]{color: black; border-width: 1px; border-color: blue; background-color: white; border-style: outset; border-radius: 5;}");
//    setContentsMargins(0, 1, 0, 1);
  
      // Background is drawn by us.
      setBackgroundRole(QPalette::NoRole);
      setAttribute(Qt::WA_NoSystemBackground);
      setAttribute(Qt::WA_StaticContents);
      setAttribute(Qt::WA_OpaquePaintEvent);    
  
      //setFrameStyle(QFrame::Box | QFrame::Sunken);
      setFrameStyle(QFrame::StyledPanel | QFrame::Sunken);
      
      //setLineWidth(1); // Not really required - StyledPanel always has 1 width.
      //setMidLineWidth(0);
      
      const int fw = frameWidth();
      setContentsMargins(fw, fw, fw, fw);
//    setProperty("clipped", "false");

      const QColor fc(255, 75, 75);
      const QColor fcd = fc.darker(150);
      _onGradient.setColorAt(0.0, fcd);
      _onGradient.setColorAt(0.5, fc);
      _onGradient.setColorAt(1.0, fcd);
      
      
//    if(!_imagesLoaded)
//    {
//       _imagesLoaded = true;
//       for(int i = 0; i < 2; i++)
//       {
//          for(int k = 0; k < 13; k++)
//          {
//             if(!_numbersImg [i][k].loadFromData(numbersPng [i][k], "png"))
//             {
//                fputs("Error loading ClipperLabel number images (png support is broken?)!", stderr);
//                abort();
//             }
//             if(_numbersImg [i][k].format() != QImage::Format_ARGB32)
//             {
//                fputs("ClipperLabel image format is wrong (must be QImage::Format_ARGB32)!", stderr);
//                abort();
//             }
//          }
//       }
//    }
   setVal(_value, true);
}
  
// REMOVE Tim. Trackinfo. Removed.
// ClipperLabel::~ClipperLabel()
// {
// 
// }

// REMOVE Tim. Trackinfo. Changed.
// QSize ClipperLabel::minimumSizeHint() const
// {
//    return QSize(20, 15);
// }
// QSize ClipperLabel::minimumSizeHint() const
// {
// //    return QSize(20, 15);
//   return fontMetrics().boundingRect(_text).size();
// }

// REMOVE Tim. Trackinfo. Added.
QSize ClipperLabel::sizeHint() const
{
  const int fw = frameWidth();
  const QSize sz = fontMetrics().boundingRect("-88.8.").size();
  return QSize(sz.width() + 2 * fw, sz.height() + 2 * fw);
}

// REMOVE Tim. Trackinfo. Changed.
// void ClipperLabel::paintEvent(QPaintEvent *)
// {   
//    QPainter p(this);
// 
//    p.setRenderHint(QPainter::Antialiasing, false);
// 
//    int xStart = (width() / 2) - (_resImg.width() / 2);
//    int yStart = (height() / 2) - (_resImg.height() / 2) + 1;
// 
//    p.drawImage(xStart, yStart, _resImg);
// 
// }
void ClipperLabel::paintEvent(QPaintEvent *e)
{   
  const QRect& r = frameRect();
//   const QColor fc = _isClipped ? QColor(255, 0, 0) : palette().window().color();
//   const QColor fcd = fc.darker();
//   QLinearGradient grad(0, frameRect().y(), 0, frameRect().y() + frameRect().height() - 1);
//   grad.setColorAt(0.0, fcd);
//   grad.setColorAt(0.5, fc);
//   grad.setColorAt(1.0, fcd);

  QPainter p;
  p.begin(this);
//   p.fillRect(r, grad);
  if(_isClipped)
    p.fillRect(r, _onGradient);
  else
    p.fillRect(r, palette().window());
  p.end();

  QFrame::paintEvent(e);
  
  p.begin(this);
  if(_isClipped)
    p.setPen(Qt::white);
  //p.drawText(e->rect(), Qt::AlignCenter, _text);  // Drawing artifacts?
  p.drawText(contentsRect(), Qt::AlignCenter, _text);
  p.end();
}

// REMOVE Tim. Trackinfo. Removed.
void ClipperLabel::resizeEvent(QResizeEvent *)
{
  _onGradient.setStart(0, frameRect().y());
  _onGradient.setFinalStop(0, frameRect().y() + frameRect().height() - 1);
}

void ClipperLabel::mousePressEvent(QMouseEvent *)
{
   emit clicked();
}

// REMOVE Tim. Trackinfo. Removed.
// void ClipperLabel::setClipper(bool b)
// {
//    if(b != _isClipped)
//    {
//       _isClipped = b;
//       if(_isClipped)
//       {
//          setProperty("clipped", "true");
//       }
//       else
//       {
//          setProperty("clipped", "false");
//       }
//       style()->unpolish(this);
//       style()->polish(this);
//       setVal(_value, true);
//       update();
//    }
// }

void ClipperLabel::setClipped(bool b)
{
   if(b != _isClipped)
   {
      _isClipped = b;
//       if(_isClipped)
//       {
//          setProperty("clipped", "true");
//       }
//       else
//       {
//          setProperty("clipped", "false");
//       }
//       style()->unpolish(this);
//       style()->polish(this);
      setVal(_value, true);
      update();
   }
}

// REMOVE Tim. Trackinfo. Changed.
// void ClipperLabel::setVal(double v, bool force)
// {
//    if((v == _value) && !force)
//    {
//       return;
//    }
// 
//    int lastW = _resImg.width();
//    _value = v;
// 
//    bool bInf = true;
//    int nIdx = _isClipped ? 1 : 0;
//    if(v > 0.0f)
//    {
//       v = MusECore::fast_log10(v) * 20.0;
//       if(v >= -60.0f)
//       {
//          int iCval = abs((int)(v * 10));
//          int c1 = (iCval / 100);
//          int c2 = (iCval - c1*100) / 10;
//          int c3 = iCval - c1 * 100 - c2 * 10;
//          int cIdx = 0;
//          int bufTxt [6];
//          if(v < 0)
//          {
//             bufTxt [cIdx++] = 11; // -
//          }
//          bufTxt [cIdx++] = c1;
//          bufTxt [cIdx++] = c2;
//          bufTxt [cIdx++] = 10; // ,
//          bufTxt [cIdx++] = c3;
//          int w = 0;
//          for(int i = 0; i < cIdx; i++)
//          {
//             w += _numbersImg [nIdx] [bufTxt [i] ].width();
//          }
//          _resImg = QImage(w, 10, QImage::Format_ARGB32);
//          _resImg.fill(Qt::transparent);
//          QPainter p(&_resImg);
//          int xStart = 0;
//          for(int i = 0; i < cIdx; i++)
//          {
//             p.drawImage(xStart, 0, _numbersImg [nIdx][bufTxt [i]]);
//             xStart += _numbersImg [nIdx][bufTxt [i]].width();
//          }
//          p.end();
//          bInf = false;
//       }
//    }
// 
//    if(bInf)
//    {
//       _resImg = _numbersImg [nIdx] [12];
//    }
// 
//    int updW = _resImg.width();
//    if(updW < lastW)
//    {
//       updW = lastW;
//    }
// 
//    int xStart = (width() / 2) - (updW / 2);
//    int yStart = (height() / 2) - (10 / 2) + 1;
// 
//    update(QRect(xStart, yStart, updW, 10));
// 
// }
void ClipperLabel::setVal(double v, bool force)
{
   if((v == _value) && !force)
   {
      return;
   }

//    int lastW = _resImg.width();
   _value = v;

//    bool bInf = true;
//    int nIdx = _isClipped ? 1 : 0;
   //if(v > 0.0f)
//    {
      v = MusECore::fast_log10(v) * 20.0;
      
      if(v >= -60.0f)
      {
        _text = locale().toString(v, 'f', 1);
//         bInf = false;
      }
      else
      {
        _text = QString("-");
        _text += QChar(0x221e); // The infinty character
        
      }
//    }

//    if(bInf)
//    {
// //       _resImg = _numbersImg [nIdx] [12];
//    }

//    int updW = _resImg.width();
//    if(updW < lastW)
//    {
//       updW = lastW;
//    }

//    int xStart = (width() / 2) - (updW / 2);
//    int yStart = (height() / 2) - (10 / 2) + 1;
// 
//    update(QRect(xStart, yStart, updW, 10));
   
   update();

}

}

